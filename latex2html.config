# LaTeX2HTML Version 96.1 : latex2html.config
#

# >>>>>>>>>>>>>>>>> YOU *MUST* CHANGE THESE VARIABLES >>>>>>>>>>>>>>>>>>>>>>>>

# Give the path to the DIRECTORY in which the latex2html files can be found
$LATEX2HTMLDIR = "/usr/local/bin";	

# Give the path to the DIRECTORY in which the pbmplus programs can be found
$PBMPLUSDIR = "/usr/local/bin";

# This should be set to 1 if you are using the NETPBM image filter library
# or to 0 if you are using the older PBMPLUS library
# Both NETPBM and PBMPLUS can be obtained by ftp from ftp.x.org 
$USENETPBM = 0;

#
#  Give the paths to latex, dvips, and GhostScript on your system:
#
$LATEX = "latex";		# LaTeX
$DVIPS = "dvips";		# dvips
$ENV{'GS'} = "gs";		# Ghostscript

# Some dvips programs generate postscript images in the reverse order by
# default. If your inlined images are all screwed up try uncommenting
# the following line:
# $DVIPS = "dvips -r0";

# >>>>>>> YOU *MAY* WANT/NEED TO CHANGE SOME OF THESE VARIABLES  >>>>>>>>>>>>>>
# You can run install_test to find out if anything needs changing.

# The following variable sets the default search list of directories for
# latex style files that latex2html should process.  It also defines a
# a list of directories (: separated) which possibly contain TeX and dvips
# inputs.  This variable is overriden by the environment variable
# TEXINPUTS, if it is specified.  Internally, the current working directory,
# "." and ".." are appended to this list of directories.
#
#  IMPORTANT:  In some installations, latex and dvips are really
#  shell scripts which set environment TEXINPUTS (and other variables)
#  to predefined values, then call the real latex and dvips.  If this
#  is true for your installation, then the $TEXINPUTS that latex2html
#  sees will only affect the processing of \input and \include's
#  by latex2html, not the operation of latex and dvips when called
#  by latex2html.  In this case, make sure that the predefined
#  values of TEXINPUTS within the latex and dvips scripts at least
#  contains "." and "..".  Otherwise, latex and dvips will not find
#  inputs from the original source directory when called from a
#  subdirectory contained therein.
#
$TEXINPUTS = "";

# Giftrans is not necessary but will make inlined images prettier.
# More on this at http://melmac.harris-atd.com/transparent_images.html
# and ftp://ftp.rz.uni-karlsruhe.de/pub/net/www/tools/giftrans.c
#
# Give the complete pathname to the giftrans executable if using PBMPLUS
# (if you use NETPBM you can ignore this)
$GIFTRANS = "giftrans";	

# Change this if you do not want the navigation icons
# to be served from Leeds. 
# To use your local icons change the value of the $ICONSERVER variable
# to point to the place where the icons are installed 
$ICONSERVER = 'http://cbl.leeds.ac.uk/nikos/figs';


# If you have equations in your text, you'll get the best results with
# PK_GENERATION=1. With this option switched on, DVIPS will be
# told to generate all of the images for a specific screen resoltion,
# eliminating "blurring" of small letters and subscripts.
# 'install-test' does *not* check whether PK_GENERATION will work.
# If any of it causes you grief, simply set PK_GENERATION=0,
# and your default printer's resolution will be used.
#
# Sidik Isani, <isani@cfht.hawaii.edu> added this.
#
$PK_GENERATION = 0;

#
#  Set the following variable ONLY if your version of dvips
#  understands the "-mode" command line switch.  It is a more reliable
#  way of setting the METAfont mode than the .dvips file on versions that
#  support this switch.  If you do this, you do not need to modify .dvipsrc
#  as described below.  Herb Swan <dprhws@edp.Arco.com> added this.
#
# $DVIPS_MODE = "toshiba";

#
# Only if you have PK_GENERATION set to 1:
# A file 'modes.mf' is probably installed somewhere in your tex
# tree. e.g /usr/local/tex/texmf/mf/modes.mf or something similar.
# If it has and entry for 'toshiba', then you can ignore the rest.
# Otherwise, you'll need to try *one* of the following things:
#
#  o Set PK_GENERATION=0 and generate images for your default printer
#  o Download the latest modes.mf from the TeX archive and re-run inimf.
#  o Choose another LOW RESOLUTION screen or printer entry from modes.mf,
#    (preferably with "|blacker|" set to 0.0 and a 1:1 aspect ratio--
#     If you don't have "toshiba", try "epsonlq", "lqlores", "nec", or "NEC")
#     If you try some other mode, remember to update two other things as well:
#
#      1) Change the 'toshiba' in the .dvipsrc file that came with latex2html.
#      2) Put whatever the |pixels_per_inch| value is into $METAFONT_DPI
#         and the .dvipsrc file
#
#   Note: The maximum usable SCALE_FACTOR is determined by this resolution.
#   A higher resolution will take more memory during processing (regardless
#   of SCALE_FACTOR) but will allow higher SCALE_FACTORs.  Do NOT just
#   change this value though.  It *must* match the |pixels_per_inch| of
#   the metafont mode (e.g. `toshiba').
#
$METAFONT_DPI = 180 ;

# >>>>>>>>>>> YOU ARE UNLIKELY TO NEED TO CHANGE ANY OF THESE >>>>>>>>>>>>>>
$TEXEXPAND = "$LATEX2HTMLDIR/texexpand";       # supplied with the translator
$PSTOGIF = "$LATEX2HTMLDIR/pstogif";           # supplied with the translator
$BLANKPBM = "$LATEX2HTMLDIR/icons/blank.pbm";  # supplied with the translator

#this is no longer used - we now use the ppmraw driver
#$ENV{'PSTOPPM'} = "$LATEX2HTMLDIR/pstoppm.ps"; # supplied with the translator

$ENV{'PNMCROP'} = "$PBMPLUSDIR/pnmcrop";
$ENV{'PPMTOGIF'} = "$PBMPLUSDIR/ppmtogif";
$ENV{'PNMFLIP'} = "$PBMPLUSDIR/pnmflip";
# Gif files are 1 or 8 bit (ie 256 colors max) and ppmquant makes sure of that
$ENV{'PPMQUANT'} = "$PBMPLUSDIR/ppmquant 256";

$ENV{'TEXINPUTS'} = $TEXINPUTS unless defined $ENV{'TEXINPUTS'};

# These are used to right justify equations
$PNMFILE =  "$PBMPLUSDIR/pnmfile";
$PNMTILE = "$PBMPLUSDIR/pnmtile";
$PNMCAT = "$PBMPLUSDIR/pnmcat";
$PPMTOGIF = "$PBMPLUSDIR/ppmtogif"; 
$PNMFLIP = "$PBMPLUSDIR/pnmflip"; 

if ($USENETPBM) {
    $GIFTOPPM = "$PBMPLUSDIR/giftopnm"}
else {
    $GIFTOPPM = "$PBMPLUSDIR/giftoppm"};
    
# This is used to "autoload" perl code to deal with specific style files
$LATEX2HTMLSTYLES = "$LATEX2HTMLDIR/styles";

# This is used to support upcoming versions of html - directory where perl
# files to handle those are
$LATEX2HTMLVERSIONS = "$LATEX2HTMLDIR/versions";


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# THERE IS NO NEED TO CHANGE ANY OF THE VARIABLES BELOW EXCEPT FOR CUSTOMISING
# THE OPERATION OF LATEX2HTML.
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

### Command Line Argument Defaults #######################################

$MAX_SPLIT_DEPTH = 8;	# Stop making separate files at this depth

$MAX_LINK_DEPTH = 4;    # Stop showing child nodes at this depth   

$NOLATEX = 0;           # 1 = do not pass unknown environments to Latex

$EXTERNAL_IMAGES = 0;   # 1 = leave the images outside the document 

# 1 =  use links to external postscript images rather than inlined GIF's.
$PS_IMAGES = 0;

$ASCII_MODE = 0;        # 1 = do not use any icons or internal images

# Set the output file prefix, prepended to all .html, .gif and .pl files:
$PREFIX = "";

# The document title.
$default_title = 'No Title';
$TITLE = $default_title;

$DESTDIR = '';         # Put the result in this directory 

# Supply your own string if you don't like the default <Name> <Date>
$ADDRESS = "<I>$address_data[0] <BR>\n$address_data[1]</I>";

$NO_NAVIGATION = 0;	# 1 = do not put a navigation panel at the top of each page

#Determines whether to navigation links should be at the top or the bottom
#of each page. The default is at the top.
$TOP_NAVIGATION = 1;

#Determines whether to navigation links should be at the top or the bottom
#of each page. The default is at the top.
$BOTTOM_NAVIGATION = 0;


# Put navigation links at the top of each  page.  If  the page  exceeds
# $WORDS_IN_PAGE  number of words then put one at the bottom of the page.
$AUTO_NAVIGATION = 1;

# Put a link to the index page in  the  navigation  panel
$INDEX_IN_NAVIGATION = 1;

# Put a link to the table of contents  in  the  navigation  panel
$CONTENTS_IN_NAVIGATION = 1;

# Put a link to the next logical page  in  the  navigation  panel
$NEXT_PAGE_IN_NAVIGATION = 1;

# Put a link to the previous logical page  in  the  navigation  panel
$PREVIOUS_PAGE_IN_NAVIGATION = 1;

$INFO = 1;              # 0 = do not make a "About this document..." section 

# Image recycling:
# If 0, do not reuse or recycle identical images. If the html subdirectory 
#	already exists, start the interactive session.
# If nonzero, do recycle them and switch off the interactive session.
# If 1, only recycle images generated from previous runs.
# If 2, recycle images from the current and previous runs.
$REUSE = 2;

# When this is 1, the section numbers are shown. The section numbers should 
# then match those that would have bee produced by LaTeX.
# The correct section numbers are obtained from the $FILE.aux file generated 
# by LaTeX.
# Hiding the seciton numbers encourages use of particular sections 
# as standalone documents. In this case the cross reference to a section 
# is shown using the default symbol rather than the section number.
$SHOW_SECTION_NUMBERS = 0;

# When $NO_IMAGES is set LaTeX2HTML will not attempt to produce any inlined images
# The missing images can be generated "off-line" by restarting LaTeX2HTML
# after setting $IMAGES_ONLY (see below);
$NO_IMAGES = 0;

# When $IMAGES_ONLY is set, LaTeX2HTML will only try to convert the inlined images
# in the file "images.tex" which should have been generated automatically during
# previous runs. This is very useful for correcting "bad LaTeX" in this file.
$IMAGES_ONLY = 0;

# When this is set, the generated HTML files will be placed in the 
# current directory. If set to 0 the default behaviour is to create (or reuse)
# another file directory.
$NO_SUBDIR = 0;

# To set the point size of LaTeX-generated GIF files, uncomment the following
# variable, and set it to its desired value (i.e, 10pt, 11pt, 12pt, etc.)
# The default is to use the point size of the original LaTeX document.
# This value will be magnified by $FIGURE_SCALE_FACTOR and
# $MATH_SCALE_FACTOR (below).
#
# $FONT_SIZE = "12pt";

# To suppress the interpretation of raw TeX commands, set $TEXDEFS = 0;
# Note:  There are many variations of \def that latex2html cannot process
# correctly!
$TEXDEFS = 1;

# To automatically insert the equivalent of "-prefix basename-", where
# "basename" is the base name of the file being translated, set
# $AUTO_PREFIX = 1.
$AUTO_PREFIX = 0;

### Other global variables ###############################################
$CHILDLINE = "<BR> <HR>\n";

# This is the line width measured in pixels and it is used to right justify
# equations and equation arrays; 
$LINE_WIDTH = 500;		

# Used in conjunction with AUTO_NAVIGATION
$WORDS_IN_PAGE = 300;	

# Affects ONLY the way accents are processed 
$default_language = 'english';	

# The value of this variable determines how many words to use in each 
# title that is added to the navigation panel (see below)
# 
$WORDS_IN_NAVIGATION_PANEL_TITLES = 4;

# This number will determine the size of the equations, special characters,
# and anything which will be converted into an inlined image
# *except* "image generating environments" such as "figure", "table" 
# or "minipage".
# Effective values are those greater than 0.
# Sensible values are between 0.1 - 4.
$MATH_SCALE_FACTOR = 1.6;

# This number will determine the size of 
# image generating environments such as "figure", "table" or "minipage".
# Effective values are those greater than 0.
# Sensible values are between 0.1 - 4.
$FIGURE_SCALE_FACTOR = 1.6;


#  If this is set then intermediate files are left for later inspection.
#  This includes $$_images.tex and $$_images.log created during image
#  conversion.
#  Caution: Intermediate files can be *enormous*.
$DEBUG = 0;

#  If both of the following two variables are set then the "Up" button
#  of the navigation panel in the first node/page of a converted document
#  will point to $EXTERNAL_UP_LINK. $EXTERNAL_UP_TITLE should be set
#  to some text which describes this external link.
$EXTERNAL_UP_LINK = "";
$EXTERNAL_UP_TITLE = "";

# If this is set to 0 then any inlined images generated from "figure" 
# environments will NOT be transparent.
$TRANSPARENT_FIGURES = 1;

# If this is set then the HTML will look better if viewed with Netscape.
$NETSCAPE_HTML = 0;

###MEH -- support of HTML 3.0 and up
# By default, the version of HTML produced is 2.0
$HTML_VERSION = '2.0';

# Valid paper sizes are "letter", "legal", "a4","a3","a2" and "a0"
# Paper sizes has no effect other than in the time it takes to create inlined
# images and in whether large images can be created at all ie
#  - larger paper sizes *MAY* help with large image problems 
#  - smaller paper sizes are quicker to handle
$PAPERSIZE = "a4";

### Internationalization ######################################################
#
# Default values used by do_cmd_tableofcontents and others.
# Change them to suit your documents

sub english_titles {
    $toc_title = "Contents";
    $lof_title = "List of Figures";
    $lot_title = "List of Tables";
    $idx_title = "Index";
    $bib_title = "References";
    $abs_title = "Abstract";
    $fig_name = "Figure";
    $tab_name = "Table";
    $info_title = "About this document ...";
    @Month = ('', 'January', 'February', 'March', 'April', 'May',
	      'June', 'July', 'August', 'September', 'October',
	      'November', 'December');
}

# Replace "english" with another language as long as
# titles for that language are defined above...
# (Make sure that you don't use a different default in your personal 
#  configuration file)
$TITLES_LANGUAGE = "english";

# To use titles in different languages use just add a new subroutine 
# eg for esperanto:
#   sub esperanto_titles {
#       $toc_title = 'Esperanto title';
#       etc...
#   }
# and then say 
# $TITLES_LANGUAGE = "esperanto";
#
# Note:  This is automatically done for you when use the german or
#	french style file, or when to specify either language through
#	the babel package.

### Navigation Panel ##########################################################
#
# The navigation panel is constructed out of buttons and section titles.
# These can be configured in any combination with arbitrary text and 
# HTML tags interspersed between them. 
# The buttons available are:
# $PREVIOUS - points to the previous section
# $UP  - points up to the "parent" section
# $NEXT - points to the next section
# $NEXT_GROUP - points to the next "group" section
# $PREVIOUS_GROUP - points to the previous "group" section
# $CONTENTS - points to the contents page if there is one
# $INDEX - points to the index page if there is one
#
# If the corresponding section exists the button will contain an
# active link to that section. If the corresponding section does
# not exist the button will be inactive.
#
# Also for each of the $PREVIOUS $UP $NEXT $NEXT_GROUP and $PREVIOUS_GROUP
# buttons there are equivalent $PREVIOUS_TITLE, $UP_TITLE, etc variables
# which contain the titles of their corresponding sections. 
# Each title is empty if there is no corresponding section.
#
# The subroutine below constructs the navigation panel in each page.
# Feel free to mix and match buttons, titles, your own text, your logos,
# and arbitrary HTML (the "." is the Perl concatenation operator).
#JKR: Use two panels (top and bot) instead of one.
sub top_navigation_panel {

    # Now add a few buttons with a space between them
    "$NEXT $UP $PREVIOUS $CONTENTS $INDEX $CUSTOM_BUTTONS" .
    
    "<BR>\n" .		# Line break
	
    # If ``next'' section exists, add its title to the navigation panel
    ($NEXT_TITLE ? "<B> Next:</B> $NEXT_TITLE\n" : undef) . 
    
    # Similarly with the ``up'' title ...
    ($UP_TITLE ? "<B>Up:</B> $UP_TITLE\n" : undef) . 
 
    # ... and the ``previous'' title
    ($PREVIOUS_TITLE ? "<B> Previous:</B> $PREVIOUS_TITLE\n" : undef) .
   
    #  Line Break, horizontal rule (3-d dividing line) and new paragraph  
    "<BR> <P>\n"		
}

sub bot_navigation_panel {

    #  Start with a horizontal rule (3-d dividing line)
    "<HR>".			
    
    # Now add a few buttons with a space between them
    "$NEXT $UP $PREVIOUS $CONTENTS $INDEX $CUSTOM_BUTTONS" .
    
    "<BR>\n" .		# Line break
	
    # If ``next'' section exists, add its title to the navigation panel
    ($NEXT_TITLE ? "<B> Next:</B> $NEXT_TITLE\n" : undef) . 
    
    # Similarly with the ``up'' title ...
    ($UP_TITLE ? "<B>Up:</B> $UP_TITLE\n" : undef) . 
 
    # ... and the ``previous'' title
    ($PREVIOUS_TITLE ? "<B> Previous:</B> $PREVIOUS_TITLE\n" : undef) 
   
}

### Meta Information #####################################################
# 
# This information will be inserted in the HEAD of the generated
# HTML file. It can be used by automatic indexing scripts (eg
# site-index.pl at http://www.ai.mit.edu/tools/site-index.html) 
# You can change the description, keywords, etc. values.
sub meta_information {
    local($_) = @_;
    # Cannot have nested HTML tags...
    do { s/<[^>]*>//g;
	 "<META NAME=\"description\" CONTENT=\"$_\">\n" .
	 "<META NAME=\"keywords\" CONTENT=\"$FILE\">\n" .
	 "<META NAME=\"resource-type\" CONTENT=\"document\">\n" .
         "<META NAME=\"distribution\" CONTENT=\"global\">\n" } if $_;
}
### Icons ################################################################

# Icon names and real icon files. 

%icons = 
(
 'cross_ref_visible_mark' ,'cross_ref_motif.gif',
 'anchor_mark' ,'&#160;',	
 'anchor_invisible_mark' ,'&#160;', 
 'up_visible_mark' ,'up_motif.gif', 
 'next_visible_mark' ,'next_group_motif.gif', 
 'previous_visible_mark' ,'previous_group_motif.gif',
 'next_page_visible_mark' ,'next_motif.gif',
 'previous_page_visible_mark' ,'previous_motif.gif',
 'contents_visible_mark' ,'contents_motif.gif',
 'index_visible_mark' ,'index_motif.gif',
 'footnote_mark' ,'foot_motif.gif',
 'up_inactive_visible_mark' ,'up_motif_gr.gif', 
 'next_inactive_visible_mark' ,'next_group_motif_gr.gif', 
 'previous_inactive_visible_mark' ,'previous_group_motif_gr.gif',
 'next_page_inactive_visible_mark' ,'next_motif_gr.gif',
 'previous_page_inactive_visible_mark' ,'previous_motif_gr.gif',
 'change_begin_visible_mark','change_begin.gif',
 'change_end_visible_mark','change_end.gif',
 'change_delete_visible_mark','change_delete.gif'
 );

%iconsizes =
 (
  'up' ,'WIDTH=26 HEIGHT=24',
  'next','WIDTH=37 HEIGHT=24',
  'previous','WIDTH=63 HEIGHT=24',
  'next_group' ,'WIDTH=81 HEIGHT=24',
  'previous_group','WIDTH=107 HEIGHT=24',
  'change_begin','WIDTH=104 HEIGHT=24',
  'change_end','WIDTH=104 HEIGHT=24',
  'change_delete','WIDTH=109 HEIGHT=24',
  'contents','WIDTH=65 HEIGHT=24',
  'index','WIDTH=43 HEIGHT=24'
  ); 

$extern_image_mark = &extern_image_mark;

sub extern_image_mark {
    "[IMAGE $type]";
}

sub img_tag {
    local($icon) = @_;
    ( ($icon =~ /(gif)/) ?
     do {
	 $icon =~ /(up|next|previous|next_page|previous_page|change_begin|change_end|change_delete|contents|index)/;
	 join('','<IMG ',$iconsizes{$1},' ALIGN=BOTTOM ALT="',$1,'" SRC="',$ICONSERVER,"/$icon",'">')
	 } :
     $icon);
}

sub inactive_img { 
    # Replaces an image name xxx.gif with xxx_gr.gif
    # It is assumed that _gr images contain the equivalent inactive icons
    local($_) = @_;
    s/(up|next|previous|next_page|previous_page)(_visible_mark)/\1_inactive\2/;
    $_;
}

### ASCII Mode ###########################################################

# This subroutine defines the ascii strings to be used instead of the 
# icons when the translator is invoked with the -ascii_mode option.
# Please modify them if you do not like them, BUT 
# *** DO NOT USE THE SPACE CHARACTER (" ") FOR $anchor_invisible_mark ***
# (if you use " " then the cross-reference hyperlinks will not work).

sub ascii_mode {
	$cross_ref_visible_mark = "[*]";
	$anchor_mark = "&#160;";	
	$anchor_invisible_mark = "&#160;"; 
	$up_visible_mark = "[Up]"; 
	$next_visible_mark = "[Next Group]"; 
	$previous_visible_mark = "[Previous Group]";
        $next_page_visible_mark ="[Next]";
	$previous_page_visible_mark ="[Previous]";
	$up_inactive_visible_mark  = "[Up]"; 
        $next_inactive_visible_mark = "[Next Group]"; 
        $previous_inactive_visible_mark = "[Previous Group]";
        $next_page_inactive_visible_mark ="[Next]";
        $previous_page_inactive_visible_mark ="[Previous]";
	$contents_visible_mark = "[Contents]";
	$index_visible_mark = "[Index]";
	$footnote_mark = "[+]";
	$extern_image_mark = &extern_image_mark;
	$EXTERNAL_IMAGES = 1;
}

### Adding commands to be ignored ########################################

# Add LaTeX commands to be ignored.
# Each command should be on a separate line and have the format:
#  <cmd_name>#{}# []# {}# [] etc. 
# {} marks a compulsory argument and [] an  optional one.
# Note that some commands may have arguments which should be left as
# text even though the command should be ignored (e.g. mbox, center, etc)

&ignore_commands( <<_IGNORED_CMDS_);
htmlrule # [] # \$_ = join('',"<BR> <HR>",\$_) 
mathversion # {} 
underline # {} # \$_ = join('',"<U>",\$_,"</U>")
centerline # {} # \$_ = join('',"<P CENTER>", \$_, "</P>")
latexhtml# {}
latex# {}
html
lrule # {} 
scrollmode
savebox# {}# []# [] 
center
_IGNORED_CMDS_

### Adding commands to be processed by TeX ###############################

# Commands which need to be passed, ALONG WITH THEIR ARGUMENTS, to TeX.
# The syntax is the same as that for ignore_commands above.

&process_commands_in_tex (<<_RAW_ARG_CMDS_);
fbox # {}
framebox # [] # [] # {}
_RAW_ARG_CMDS_
	
1;	# This must be the last line
